% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/generic_gof_tests.R
\name{gof_test_sim_uniparam}
\alias{gof_test_sim_uniparam}
\title{Perform a goodness of fit test using simulation and uniparameter statistical functions}
\usage{
gof_test_sim_uniparam(
  x,
  fn_estimate_params,
  fn_calc_test_stat,
  fn_simulate,
  noverlap = 1,
  nreps = 999,
  parallelise = FALSE,
  ncores = NULL,
  bs_ci = NULL,
  nreps_bs_ci = 10000
)
}
\arguments{
\item{x}{The data being tested.}

\item{fn_estimate_params}{A function that takes the data and returns an object representing
the parameters of the distribution being fitted.}

\item{fn_calc_test_stat}{A function that takes the data and the estimated parameters,
and calculates the test statistic for the distribution being tested.}

\item{fn_simulate}{A function takes the number of values to simulate, a set of estimated parameters,
and the extent of any overlap in the data,
and returns that number of simulated values from the distribution being tested.}

\item{noverlap}{The extent of any overlap in the data. \code{1} means no overlap,
and \code{fn_simulate} should operate by ordinary simulation. If \code{noverlap > 1} then
autocorrelation must be induced in the simulations that is consistent with the degree of overlap,
to give unbiased test results. \code{fn_estimate_params} must also allow for the degree of overlap.}

\item{nreps}{The number of repetitions of the simulation to use.}

\item{parallelise}{Flag indicating whether or not to parallelise the calculations.}

\item{ncores}{The number of cores to use when parallelising.
\code{NULL} means one fewer than the number of cores on the machine.}

\item{bs_ci}{The width of a confidence interval around the p value,
which will be calculated using a non-parametric bootstrap.
\code{NULL} means no confidence interval will be produced.}

\item{nreps_bs_ci}{The number of iterations used in the bootstrapped confidence interval.}
}
\value{
A list with five components:
\itemize{
  \item{ts}{The test statistic.}
  \item{p_value}{The p value for the test statistic, derived by simulation.}
  \item{count_NA}{The number of \code{NA} values produced in the simulation of the test statistic.
  These generally indicate that the parameter estimation failed.}
  \item{p_value_lower}{If \code{bs_ci} is not \code{NULL}, the lower end
  of the confidence interval around the p value, calculated using
  a non-parametric bootstrap with \code{nreps_bs_ci} repetitions.
  Otherwise \code{NA}.}
  \item{p_value_upper}{If \code{bs_ci} is not \code{NULL}, the upper end
  of the confidence interval around the p value, calculated using
  a non-parametric bootstrap with \code{nreps_bs_ci} repetitions.
  Otherwise \code{NA}.}
}
}
\description{
Many statistical tests have null hypotheses that assume a distribution is fully specified
(with its parameters known in advance). It is common to estimate parameters from data,
and in this case a general method for adapting the statistical test is to use
simulation to derive the distribution of the test statistic, and derive the p-value from this distribution.
}
\details{
Similarly in order to adapt to overlapping data when performing statistical tests,
it is necessary to use simulation, and to simulate in a way that induces the autocorrelation
consistent with overlapping data. This function can perform testing on overlapping data
by suitable choice of the plug-in function \code{fn_simulate}.
In this case the estimation function \code{fn_estimate_params} should also allow for bias
in parameter estimation induced by the overlap.

In order for this function to be generic, it assumes all statistical functions involved
are uniparameter, i.e. all their parameters are put into a single object.
This entails wrapping (say) \code{\link[stats]{pnorm}} so the wrapper takes a list containing the
\code{mean} and \code{sd} parameters, and passes them on.
The function \code{\link{gof_test_sim}} sets up the wrapper functions automatically,
based on the un-prefixed name of the distribution (e.g. \code{norm}).

TODO explain design further.
}
\examples{
fn_estimate_params <- function(x) list(mean = mean(x), sd = sd(x))
fn_p <- function(x, params) pnorm(x, params$mean, params$sd)
fn_test_statistic <- function(x, est_params) calc_ks_test_stat(x, est_params, fn_p)
fn_simulate <- function(N, est_params) rnorm(N, est_params$mean, est_params$sd)
gof_test_sim_uniparam(rnorm(100), fn_estimate_params, fn_test_statistic, fn_simulate)
}
